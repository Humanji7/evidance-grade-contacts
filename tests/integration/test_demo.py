"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π integration —Ç–µ—Å—Ç –¥–ª—è EGC PoC.

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É —Å unit —Ç–µ—Å—Ç–∞–º–∏ - —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã end-to-end.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    # –¢–µ—Å—Ç –Ω–∞ URL –∏–∑ gold dataset (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    EGC_RUN_INTEGRATION=1 pytest tests/integration/test_demo.py -v
    
    # –¢–µ—Å—Ç –Ω–∞ –≤–∞—à URL
    EGC_TEST_URL="https://example.com/team" EGC_RUN_INTEGRATION=1 pytest tests/integration/test_demo.py -v

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - EGC_RUN_INTEGRATION=1 (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
    - Playwright browsers —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
"""

import os
import pytest
from src.pipeline.ingest import IngestPipeline


@pytest.mark.skipif(
    os.getenv("EGC_RUN_INTEGRATION") != "1",
    reason="Integration tests require EGC_RUN_INTEGRATION=1"
)
def test_end_to_end_contact_extraction():
    """
    Integration —Ç–µ—Å—Ç: –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ end-to-end.
    
    –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç unit —Ç–µ—Å—Ç–æ–≤:
    - –î–µ–ª–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã
    - –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Playwright –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç
    - –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π pipeline –æ—Ç URL –¥–æ –≥–æ—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ 7 –ø–æ–ª–µ–π evidence package –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    """
    # –ì–∏–±–∫–∏–π URL: –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π —á–µ—Ä–µ–∑ EGC_TEST_URL
    test_url = os.getenv(
        "EGC_TEST_URL", 
        "https://www.jacksonlewis.com/people/jacqueline-a-scott"  # –ò–∑–≤–µ—Å—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
    )
    
    print(f"\nüåê Testing URL: {test_url}")
    
    # –°–æ–∑–¥–∞—ë–º pipeline –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
    pipeline = IngestPipeline()
    result = pipeline.ingest(test_url)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    assert result.success, f"Failed to ingest {test_url}: {result.error}"
    assert len(result.contacts) > 0, "No contacts extracted"
    
    print(f"‚úÖ Extraction method: {result.method}")
    print(f"üìû Contacts found: {len(result.contacts)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    verified_count = 0
    for i, contact in enumerate(result.contacts):
        print(f"\nüìã Contact #{i+1}: {contact.person_name} ({contact.contact_type})")
        
        if contact.verification_status == "VERIFIED":
            verified_count += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É evidence package (–≤—Å–µ 7 –ø–æ–ª–µ–π)
            evidence = contact.evidence
            assert evidence.source_url, "Missing source_url in evidence"
            assert evidence.selector_or_xpath, "Missing selector_or_xpath in evidence"
            assert evidence.verbatim_quote, "Missing verbatim_quote in evidence"
            assert evidence.dom_node_screenshot, "Missing dom_node_screenshot in evidence"
            assert evidence.timestamp, "Missing timestamp in evidence"
            assert evidence.parser_version, "Missing parser_version in evidence"
            assert evidence.content_hash, "Missing content_hash in evidence"
            
            print(f"   ‚úÖ Complete evidence package (7/7 fields)")
        else:
            print(f"   ‚ö†Ô∏è  Status: {contact.verification_status}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω VERIFIED –∫–æ–Ω—Ç–∞–∫—Ç
    assert verified_count > 0, "No VERIFIED contacts found"
    
    success_rate = (verified_count / len(result.contacts)) * 100
    print(f"\nüìà Success Rate: {success_rate:.1f}% ({verified_count}/{len(result.contacts)})")
    
    # –î–ª—è PoC –æ–∂–∏–¥–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–π success rate
    assert success_rate >= 50, f"Success rate too low: {success_rate:.1f}%"
    
    print(f"üéØ Integration test passed! URL successfully processed end-to-end.")


if __name__ == "__main__":
    # –£–¥–æ–±–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if os.getenv("EGC_RUN_INTEGRATION") == "1":
        test_end_to_end_contact_extraction()
    else:
        print("Set EGC_RUN_INTEGRATION=1 to run integration test")
